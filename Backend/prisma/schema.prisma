// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  password  String
  role      Role     @default(USER)
  avatar    String?
  isActive  Boolean  @default(true)
  lastLogin DateTime?
  
  // Password reset fields
  resetPasswordToken  String?
  resetPasswordExpire DateTime?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  ownedProjects    Project[] @relation("ProjectOwner")
  collaborations   ProjectCollaborator[]
  
  @@map("users")
}

model Project {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  tech        String[]
  status      ProjectStatus @default(DEVELOPMENT)
  users       Int           @default(0)
  isPublic    Boolean       @default(false)
  tags        String[]
  lastUpdated DateTime      @default(now())
  
  // Repository information
  repositoryUrl    String?
  repositoryBranch String? @default("main")
  
  // Deployment information
  deploymentUrl    String?
  deploymentStatus DeploymentStatus @default(NOT_DEPLOYED)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  ownerId       String                @db.ObjectId
  owner         User                  @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  collaborators ProjectCollaborator[]
  
  @@map("projects")
}

model ProjectCollaborator {
  id   String            @id @default(auto()) @map("_id") @db.ObjectId
  role CollaboratorRole  @default(VIEWER)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  userId    String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String  @db.ObjectId
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@unique([userId, projectId])
  @@map("project_collaborators")
}

enum Role {
  USER
  ADMIN
}

enum ProjectStatus {
  ACTIVE
  DEVELOPMENT
  INACTIVE
  COMPLETED
}

enum DeploymentStatus {
  DEPLOYED
  DEPLOYING
  FAILED
  NOT_DEPLOYED
}

enum CollaboratorRole {
  VIEWER
  EDITOR
  ADMIN
}
